/* src/core/ui/components/DynamicPanel.svelte generated by Svelte v3.50.1 */

function create_details_slot$2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "slot", "details");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[10](div);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[10](null);
		}
	};
}

function create_fragment$z(ctx) {
	let panel;
	let updating_isActive;
	let current;

	function panel_isActive_binding(value) {
		/*panel_isActive_binding*/ ctx[11](value);
	}

	let panel_props = {
		buttonLabel: /*buttonLabel*/ ctx[0],
		buttonClass: /*buttonClass*/ ctx[1],
		onshow: /*onshow*/ ctx[2],
		onhide: /*onhide*/ ctx[3],
		$$slots: { details: [create_details_slot$2] },
		$$scope: { ctx }
	};

	if (/*isActive*/ ctx[5] !== void 0) {
		panel_props.isActive = /*isActive*/ ctx[5];
	}

	panel = new Panel({ props: panel_props });
	binding_callbacks.push(() => bind(panel, 'isActive', panel_isActive_binding));

	return {
		c() {
			create_component(panel.$$.fragment);
		},
		m(target, anchor) {
			mount_component(panel, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const panel_changes = {};
			if (dirty & /*buttonLabel*/ 1) panel_changes.buttonLabel = /*buttonLabel*/ ctx[0];
			if (dirty & /*buttonClass*/ 2) panel_changes.buttonClass = /*buttonClass*/ ctx[1];
			if (dirty & /*onshow*/ 4) panel_changes.onshow = /*onshow*/ ctx[2];
			if (dirty & /*onhide*/ 8) panel_changes.onhide = /*onhide*/ ctx[3];

			if (dirty & /*$$scope, container*/ 4112) {
				panel_changes.$$scope = { dirty, ctx };
			}

			if (!updating_isActive && dirty & /*isActive*/ 32) {
				updating_isActive = true;
				panel_changes.isActive = /*isActive*/ ctx[5];
				add_flush_callback(() => updating_isActive = false);
			}

			panel.$set(panel_changes);
		},
		i(local) {
			if (current) return;
			transition_in(panel.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(panel.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(panel, detaching);
		}
	};
}

function instance$A($$self, $$props, $$invalidate) {
	let { buttonLabel = undefined } = $$props;
	let { buttonClass = undefined } = $$props;
	let { root = undefined } = $$props;
	let { ondestroy = noop$1 } = $$props;
	let { onshow = noop$1 } = $$props;
	let { onhide = noop$1 } = $$props;
	const hide = () => $$invalidate(5, isActive = false);
	const show = () => $$invalidate(5, isActive = true);
	let container;
	let isActive = false;
	onDestroy(ondestroy);

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(4, container);
		});
	}

	function panel_isActive_binding(value) {
		isActive = value;
		$$invalidate(5, isActive);
	}

	$$self.$$set = $$props => {
		if ('buttonLabel' in $$props) $$invalidate(0, buttonLabel = $$props.buttonLabel);
		if ('buttonClass' in $$props) $$invalidate(1, buttonClass = $$props.buttonClass);
		if ('root' in $$props) $$invalidate(6, root = $$props.root);
		if ('ondestroy' in $$props) $$invalidate(7, ondestroy = $$props.ondestroy);
		if ('onshow' in $$props) $$invalidate(2, onshow = $$props.onshow);
		if ('onhide' in $$props) $$invalidate(3, onhide = $$props.onhide);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*container, root*/ 80) {
			if (container && root && container.firstChild !== root) {
				container.hasChildNodes()
				? container.replaceChild(root, container.firstChild)
				: container.append(root);
			}
		}
	};

	return [
		buttonLabel,
		buttonClass,
		onshow,
		onhide,
		container,
		isActive,
		root,
		ondestroy,
		hide,
		show,
		div_binding,
		panel_isActive_binding
	];
}

class DynamicPanel extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$A, create_fragment$z, safe_not_equal, {
			buttonLabel: 0,
			buttonClass: 1,
			root: 6,
			ondestroy: 7,
			onshow: 2,
			onhide: 3,
			hide: 8,
			show: 9
		});
	}

	get hide() {
		return this.$$.ctx[8];
	}

	get show() {
		return this.$$.ctx[9];
	}
}